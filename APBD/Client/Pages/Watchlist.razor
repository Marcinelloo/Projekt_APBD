@page "/watchlist"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using APBD.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigator

<h1>Watchlist</h1>
<div>
    @if (watchList != null)
    {
        <table>
            <thead>
                <tr>
                    <th @onclick="@(() => Sort("Logo"))">Logo</th>
                    <th @onclick="@(() => Sort("Symbol"))">Ticker</th>
                    <th @onclick="@(() => Sort("Name"))">Phone Number</th>
                    <th @onclick="@(() => Sort("Sector"))">Desctription</th>
                    <th @onclick="@(() => Sort("Country"))">Name</th>
                    <th @onclick="@(() => Sort("Country"))">Locale</th>
                    <th>Options</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in watchList)
                {
                    <tr>
                        <td><img alt="@(item.name) @(item.ticker) Avatar" src="@item.branding.icon_url?apiKey=BGECFGGCsrXSWU1QyALI_xWsV2vDlO4h" /></td>
                        <td>@item.ticker</td>
                        <td>@item.phone_number</td>
                        <td>@item.sic_description</td>
                        <td>@item.name</td>
                        <td>@item.locale</td>
                        <td>
                            <button class="btn btn-danger" @onclick="(() => DeleteItemFromWatchList(item.ticker))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>}
    else
    {
        <p>niestety nie masz nic tutaj do wysiwetlnia</p>
    }
</div>

<button class="btn btn-primary" @onclick="GoToDashboard">Back</button>

@code {
    private List<DashboardTicker> watchList { get; set; }
    public KeyValuePair<string, bool> ColumnSort { get; set; } = new KeyValuePair<string, bool>("", false);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<DashboardTickerList>("CompanyDetails");
            watchList = result.dashboardTickers;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    private void Sort(string columnName)
    {
        if (ColumnSort.Key != columnName)
        {
            ColumnSort = new KeyValuePair<string, bool>(columnName, false);
        }
        else
        {
            ColumnSort = new KeyValuePair<string, bool>(columnName, !ColumnSort.Value);
        }

        if (ColumnSort.Value)
        {
            SortDesc(columnName);
        }
        else
        {
            SortAsc(columnName);
        }
    }

    private void SortAsc(string columnName)
    {
        watchList = watchList.OrderBy(e => e.GetType().GetProperty(columnName).GetValue(e, null)).ToList();
    }

    private void SortDesc(string columnName)
    {
        watchList = watchList.OrderByDescending(e => e.GetType().GetProperty(columnName).GetValue(e, null)).ToList();
    }

    private async Task DeleteItemFromWatchList(string ticker)
    {
        await Http.DeleteAsync("CompanyDetails/delete/" + ticker);
        var result = await Http.GetFromJsonAsync<DashboardTickerList>("CompanyDetails");
        watchList = result.dashboardTickers;
    }

    private void GoToDashboard()
    {
        navigator.NavigateTo("/");
    }
}
