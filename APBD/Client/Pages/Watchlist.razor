@page "/watchlist"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using APBD.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigator

<div class="wrapper">
    <h1>Watchlist:</h1>

    @if (loading)
    {

        <div class="loading__container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden"></span>
            </div>
            <div>
                Loading...
            </div>
        </div>
    }
    else
    {
        <div>
            @if (watchList != null)
            {
                <table>
                    <thead>
                        <tr>
                            <th>Logo</th>
                            <th @onclick="@(() => Sort("ticker"))">Ticker</th>
                            <th @onclick="@(() => Sort("phone_number"))">Phone Number</th>
                            <th @onclick="@(() => Sort("sic_description"))">Desctription</th>
                            <th @onclick="@(() => Sort("name"))">Name</th>
                            <th @onclick="@(() => Sort("locale"))">Locale</th>
                            <th>Options</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in watchList)
                        {
                            <tr>
                                <td><img alt="@(item.name) @(item.ticker) Avatar" src="@item.branding.icon_url?apiKey=BGECFGGCsrXSWU1QyALI_xWsV2vDlO4h" /></td>
                                <td>@item.ticker</td>
                                <td>@item.phone_number</td>
                                <td>@item.sic_description</td>
                                <td>@item.name</td>
                                <td>@item.locale</td>
                                <td>
                                    <button class="btn btn-danger" @onclick="(() => DeleteItemFromWatchList(item.ticker))">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>}
            else
            {
                <p class="not_found__wrapper">niestety nie masz nic tutaj do wysiwetlnia</p>
            }
        </div>
    }
    <button class="small_wdith btn btn-primary" @onclick="GoToDashboard">Back</button>
</div>

@code {
    private List<DashboardTicker> watchList { get; set; }
    private bool loading { get; set; } = true;
    public KeyValuePair<string, bool> ColumnSort { get; set; } = new KeyValuePair<string, bool>("", false);

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {

            var result = await Http.GetFromJsonAsync<DashboardTickerList>("CompanyDetails");
            watchList = result.dashboardTickers;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        loading = false;
    }

    private void Sort(string columnName)
    {
        if (ColumnSort.Key != columnName)
        {
            ColumnSort = new KeyValuePair<string, bool>(columnName, false);
        }
        else
        {
            ColumnSort = new KeyValuePair<string, bool>(columnName, !ColumnSort.Value);
        }

        if (ColumnSort.Value)
        {
            SortDesc(columnName);
        }
        else
        {
            SortAsc(columnName);
        }
    }

    private void SortAsc(string columnName)
    {
        watchList = watchList.OrderBy(e => e.GetType().GetProperty(columnName).GetValue(e, null)).ToList();
    }

    private void SortDesc(string columnName)
    {
        watchList = watchList.OrderByDescending(e => e.GetType().GetProperty(columnName).GetValue(e, null)).ToList();
    }

    private async Task DeleteItemFromWatchList(string ticker)
    {
        await Http.DeleteAsync("CompanyDetails/delete/" + ticker);
        var result = await Http.GetFromJsonAsync<DashboardTickerList>("CompanyDetails");
        watchList = result.dashboardTickers;
    }

    private void GoToDashboard()
    {
        navigator.NavigateTo("/");
    }
}
