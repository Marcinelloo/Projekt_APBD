@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using APBD.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager navigator
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Charts

<style>
    h1, h3, span {
        color: #0269A4;
    }

    .search__wrapper {
        display: flex;
        gap: 20px
    }

    .middle__width {
        max-width: 400px;
    }

    .dropdown__menu {
        width: 200px;
        border-radius: 0 0 10px 10px;
        background-color: #C0C0C0;
    }

    section {
        padding-left: 10px;
    }


    div section:hover {
        background-color: lightgrey;
    }

    .company_infor__wrapper {
        margin-top: 50px;
        display: flex;
        gap: 20px;
    }

        .company_infor__wrapper img {
            border-radius: 10px;
            margin-top: 20px;
        }

    .flex {
        display: flex;
        gap: 20px;
    }

    .circle {
        border-radius: 50%;
    }
</style>

<h1>Dashborad</h1>

<div class="search__wrapper">
    <input class="middle__width form-control" @bind="SearchWord" @bind:event="oninput" @onkeyup="() => SearchTickersByString(SearchWord)" placeholder="Enter ticker" />
    <button class="btn btn-primary" @onclick="() => FindCompanyByTicker(SearchWord)">Search</button>
    <button class="btn btn-warning" @onclick="() => GoToWatchList()">WatchList</button>
</div>

<div class="dropdown__menu">
    @if (SearchOptions != null)
    {
        @foreach (var item in SearchOptions.Where(search => search.ToUpper().Contains(SearchWord.ToUpper()) && SearchWord.ToUpper() != search.ToUpper()))
        {

            <section @onclick="() => SearchWord = item">@item</section>
        }

    }
</div>
@if (tickerDetails != null)
{
    <div class="company_infor__wrapper">

        <div>
            <img src='@tickerDetails.branding.icon_url?apiKey=BGECFGGCsrXSWU1QyALI_xWsV2vDlO4h' width="100" height="50" />
        </div>
        <div>
            <h3>@tickerDetails.name</h3>
            <div class="flex">
                <h4>Country: <span> @tickerDetails.locale</span></h4>
                <h4>People: <span>@tickerDetails.total_employees</span></h4>
            </div>
            <div class="flex">
                <h4> Profesion: <span>@tickerDetails.sic_description</span></h4>
                <h4> Number: <span>@tickerDetails.phone_number</span></h4>
            </div>
        </div>
        <div>
            <button class="circle btn btn-warning" @onclick="() => AddCompanyToList(tickerDetails)">+</button>
        </div>
    </div>
    <div style="display: flex; gap: 40px;">
        <button class="btn btn-secondary" @onclick="() => ChangeCharDataToOneDay()">Last stock day</button>
        <button class="btn btn-secondary" @onclick="() => ChangeCharDataToOneWeek()">Last 7 days</button>
        <button class="btn btn-secondary" @onclick="() => ChangeCharDataToThreeMonths()">Last 3 months</button>
    </div>
    <SfChart Title="@tickerDetails.ticker">
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" />
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartSeriesCollection>
            <ChartSeries DataSource="@StockDetails" XName="t" High="h" Low="l" Type="ChartSeriesType.Hilo">
            </ChartSeries>
        </ChartSeriesCollection>
    </SfChart>

}


@code {
    string SearchWord { get; set; } = String.Empty;
    List<string> SearchOptions { get; set; }
    private DashboardSetchList response;
    private DashboardTicker tickerDetails;
    private StockDateInformationForDashboardDTO stocks;
    public List<StockDateInformation> StockDetails;



    protected async Task SearchTickersByString(string ticker)
    {
        try
        {
            if (ticker.Length > 0)
            {

                response = await Http.GetFromJsonAsync<DashboardSetchList>("Polyglon/symbol/" + ticker);
                SearchOptions = response.results.Select(f => f.ticker).Distinct().Take(5).ToList();

            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
        }
    }

    protected async Task FindCompanyByTicker(string ticker)
    {
        try
        {

            var response = await Http.GetFromJsonAsync<DashboardTickerResult>("Polyglon/ticker/" + ticker);
            tickerDetails = response.results;
            stocks = await Http.GetFromJsonAsync<StockDateInformationForDashboardDTO>("Polyglon/stocks/" + ticker);
            StockDetails = stocks.day;

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    protected async Task AddCompanyToList(DashboardTicker ticker)
    {
        await Http.PostAsJsonAsync("CompanyDetails/add", ticker);
    }

    private void GoToWatchList()
    {
        navigator.NavigateTo("/watchlist");
    }

    private void ChangeCharDataToOneDay()
    {
        StockDetails = stocks.day;
    }

    private void ChangeCharDataToOneWeek()
    {
        StockDetails = stocks.sevenDaysStock;
    }

    private void ChangeCharDataToThreeMonths()
    {
        StockDetails = stocks.threeMonths;
    }

}

